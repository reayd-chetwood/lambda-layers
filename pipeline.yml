AWSTemplateFormatVersion: '2010-09-09'

Description: >
  CloudFormation Template Continuous Delivery: This template
  builds an AWS CodePipeline pipeline that implements a CI/CD (deployment)
  pipeline for AWS CloudFormation and lambda function

Parameters:

  # *** The stack name for the actual application we're deploying
  ApplicationStackName:
    Type: String
    AllowedPattern: '[A-Za-z0-9-]+'

  # *** Environment: The computer systems tier to deploy the application to
  Environment:
    AllowedValues:
      - dev
      - test
      - prod
    Type: String

  # *** This value must always be passed in when creating / updating stack
  # 'NoEcho' is set to true, for security, so token won't be visible when examining the resulting stack
  GitHubOAuthToken:
    Type: String
    NoEcho: true
    MinLength: 40
    MaxLength: 40
    AllowedPattern: '[a-z0-9]*'

  # *** The remaining parameters should either be:
  # - overridden via changing 'Default' here (PREFERABLE, since then they're in source control)
  # - or you can pass them in when creating / updating the stack

  # *** The owner of the Github repo for this application.
  GitHubOwner:
    Type: String
    AllowedPattern: '[A-Za-z0-9-]+'

  GitHubRepo:
    Type: String
    AllowedPattern: '[A-Za-z0-9-_]+'

  GitHubBranch:
    Type: String
    AllowedPattern: '[A-Za-z0-9-/]+'

Conditions:
  CreateCodeCommitPipeline: !Equals [dev, !Ref Environment]
  CreateS3Pipeline: !Not
    - !Equals [dev, !Ref Environment]

Mappings:
  EnvironmentMap:
    dev:
      "PrettyName": "Dev"
    test:
      "PrettyName": "Test"
      DockerRepoUri: ""
    prod:
      "PrettyName": "Prod"

Resources:

  PipelineArtifactsBucket:
    Type: AWS::S3::Bucket
    Properties:
      VersioningConfiguration:
        Status: Enabled

  CodePipeline:
    Type: AWS::CodePipeline::Pipeline
    Properties:
      ArtifactStore:
        Type: S3
        Location: !Ref PipelineArtifactsBucket
      RestartExecutionOnUpdate: true
      RoleArn: !GetAtt CodePipelineRole.Arn
      Stages:
        - Name: Github
          Actions:
            - Name: Source
              InputArtifacts: []
              ActionTypeId:
                Category: Source
                Owner: ThirdParty
                Version: 1
                Provider: GitHub
              OutputArtifacts:
                - Name: SourceCode
              Configuration:
                Owner: !Ref GitHubOwner
                Repo: !Ref GitHubRepo
                Branch: !Ref GitHubBranch
                PollForSourceChanges: false
                OAuthToken: !Ref GitHubOAuthToken
              RunOrder: '1'
        - Name: Infrastructure
          Actions:
            - Name: AWS
              ActionTypeId:
                Category: Deploy
                Owner: AWS
                Provider:  CloudFormation
                Version: '1'
              InputArtifacts:
                - Name: SourceCode
              Configuration:
                ActionMode: CREATE_UPDATE
                Capabilities: CAPABILITY_NAMED_IAM,CAPABILITY_AUTO_EXPAND,CAPABILITY_IAM
                RoleArn: !GetAtt CloudformationRole.Arn
                StackName: !Ref ApplicationStackName
                TemplatePath: SourceCode::cloudformation.yml
                ParameterOverrides: !Sub '{ "Environment": "${Environment}", "PipelineArtifactsBucket": "${PipelineArtifactsBucket}" }'
              RunOrder: '1'

  # 'GithubWebhook' satisfies two requirements:
  # -- Means that updates are pushed from GitHub, rather than AWS having to poll
  # -- Means we can filter for required changes
  GithubWebhook:
    Type: 'AWS::CodePipeline::Webhook'
    Properties:
      Authentication: GITHUB_HMAC
      AuthenticationConfiguration:
        SecretToken: !Ref GitHubOAuthToken
      RegisterWithThirdParty: 'true'
      Filters:
        - JsonPath: '$.ref'
          MatchEquals: refs/heads/{Branch}
      TargetPipeline: !Ref CodePipeline
      TargetAction: Source
      TargetPipelineVersion: !GetAtt CodePipeline.Version

  CodePipelineRole:
    Type: 'AWS::IAM::Role'
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - codepipeline.amazonaws.com
            Action:
              - 'sts:AssumeRole'
      Path: /
      Policies:
        - PolicyName: CodePipelinePolicy
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - 'codecommit:*'
                  - 's3:*'
                  - 'codebuild:StartBuild'
                  - 'codebuild:BatchGetBuilds'
                  - 'cloudformation:CreateStack'
                  - 'cloudformation:DescribeStacks'
                  - 'cloudformation:DeleteStack'
                  - 'cloudformation:UpdateStack'
                  - 'cloudformation:CreateChangeSet'
                  - 'cloudformation:ExecuteChangeSet'
                  - 'cloudformation:DeleteChangeSet'
                  - 'cloudformation:DescribeChangeSet'
                  - 'cloudformation:SetStackPolicy'
                  - 'iam:PassRole'
                  - 'sns:Publish'
                Resource: '*'

  CodePipelineBuildRole:
    Type: 'AWS::IAM::Role'
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - codebuild.amazonaws.com
            Action:
              - 'sts:AssumeRole'
      Path: /
      Policies:
        - PolicyName: CodeCommitPolicy
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - "codecommit:*"
                Resource: '*'
        - PolicyName: CLoudWatchLogsPolicy
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - "logs:CreateLogGroup"
                  - "logs:CreateLogStream"
                  - "logs:PutLogEvents"
                Resource: '*'
        - PolicyName: S3Policy
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - "s3:PutObject"
                  - "s3:GetObject"
                  - "s3:GetObjectVersion"
                  - "s3:List*"
                  - "s3:DeleteObject"
                Resource: '*'

  CloudformationRole:
    Type: 'AWS::IAM::Role'
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - cloudformation.amazonaws.com
            Action:
              - 'sts:AssumeRole'
      Path: /
      Policies:
        - PolicyName: LambdaPolicy
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - 'lambda:*'
                Resource: '*'
        - PolicyName: S3Policy
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - 's3:*'
                Resource: '*'
